
PinMon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000047c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800106  00800106  00000536  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000040  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000175  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ad  00000000  00000000  000006ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c7  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000486  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002dd  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "hal.h"


int main()
{
	init_io();
  a6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_io>
	init_config();
  aa:	0e 94 04 02 	call	0x408	; 0x408 <init_config>
	init_usart();	
  ae:	0e 94 71 01 	call	0x2e2	; 0x2e2 <init_usart>
#include <avr/interrupt.h>

//enable usart rx clock and max485 output
inline void input_on()
{
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0);
  b2:	80 91 c1 00 	lds	r24, 0x00C1
  b6:	80 69       	ori	r24, 0x90	; 144
  b8:	80 93 c1 00 	sts	0x00C1, r24
	PORTC &= ~(1 << PINC5);
  bc:	45 98       	cbi	0x08, 5	; 8
	input_on();
	init_timer();
  be:	0e 94 63 01 	call	0x2c6	; 0x2c6 <init_timer>
	sei();
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x1e>

000000c6 <__vector_9>:
volatile uint32_t sendbuf;
volatile uint8_t ref;


ISR(TIMER2_OVF_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
	if(sending_counter)
  e0:	80 91 02 01 	lds	r24, 0x0102
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	a0 91 04 01 	lds	r26, 0x0104
  ec:	b0 91 05 01 	lds	r27, 0x0105
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	a1 05       	cpc	r26, r1
  f4:	b1 05       	cpc	r27, r1
  f6:	11 f1       	breq	.+68     	; 0x13c <__vector_9+0x76>
	{
		if(sending_counter & sendbuf)
  f8:	20 91 02 01 	lds	r18, 0x0102
  fc:	30 91 03 01 	lds	r19, 0x0103
 100:	40 91 04 01 	lds	r20, 0x0104
 104:	50 91 05 01 	lds	r21, 0x0105
 108:	80 91 07 01 	lds	r24, 0x0107
 10c:	90 91 08 01 	lds	r25, 0x0108
 110:	a0 91 09 01 	lds	r26, 0x0109
 114:	b0 91 0a 01 	lds	r27, 0x010A
 118:	82 23       	and	r24, r18
 11a:	93 23       	and	r25, r19
 11c:	a4 23       	and	r26, r20
 11e:	b5 23       	and	r27, r21
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	a1 05       	cpc	r26, r1
 124:	b1 05       	cpc	r27, r1
 126:	11 f0       	breq	.+4      	; 0x12c <__vector_9+0x66>
{
	PORTC |= (1 << PINC4);
}
inline void max_out_off()
{
	PORTC &= ~(1 << PINC4);
 128:	44 98       	cbi	0x08, 4	; 8
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_9+0x68>
	UCSR0B &= ~((1<<RXCIE0) | (1<<RXEN0));
	PORTC  |= (1 << PINC5);
}
inline void max_out_on()
{
	PORTC |= (1 << PINC4);
 12c:	44 9a       	sbi	0x08, 4	; 8
	tx_off();
}

inline void reset_timer2()
{
	TCNT2=255-42;
 12e:	85 ed       	ldi	r24, 0xD5	; 213
 130:	80 93 b2 00 	sts	0x00B2, r24
	GTCCR |= 1<<PSRASY;	
 134:	83 b5       	in	r24, 0x23	; 35
 136:	82 60       	ori	r24, 0x02	; 2
 138:	83 bd       	out	0x23, r24	; 35
 13a:	05 c0       	rjmp	.+10     	; 0x146 <__vector_9+0x80>
		}
		reset_timer2();
	}
	else
	{
		status=sending_dev_id_done;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 0d 01 	sts	0x010D, r24
	TIFR2 |= 1<<TOV2;	
}

inline void stop_timer2()
{
	TIMSK2 = 0;
 142:	10 92 70 00 	sts	0x0070, r1
		stop_timer2();
	}
	sending_counter>>=1;
 146:	80 91 02 01 	lds	r24, 0x0102
 14a:	90 91 03 01 	lds	r25, 0x0103
 14e:	a0 91 04 01 	lds	r26, 0x0104
 152:	b0 91 05 01 	lds	r27, 0x0105
 156:	b6 95       	lsr	r27
 158:	a7 95       	ror	r26
 15a:	97 95       	ror	r25
 15c:	87 95       	ror	r24
 15e:	80 93 02 01 	sts	0x0102, r24
 162:	90 93 03 01 	sts	0x0103, r25
 166:	a0 93 04 01 	sts	0x0104, r26
 16a:	b0 93 05 01 	sts	0x0105, r27
}
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_13>:


ISR(TIMER1_OVF_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	switch(status)
 196:	80 91 0d 01 	lds	r24, 0x010D
 19a:	88 23       	and	r24, r24
 19c:	41 f4       	brne	.+16     	; 0x1ae <__vector_13+0x26>
	PORTD ^= (1 << PIND3);
}
//invert tx pin
inline void invert_tx()
{
	PORTD ^= (1 << PIND1);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	89 27       	eor	r24, r25
 1a4:	8b b9       	out	0x0b, r24	; 11
	max_out_off();
}
//invert status led
inline void invert_status()
{
	PORTD ^= (1 << PIND3);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	98 e0       	ldi	r25, 0x08	; 8
 1aa:	89 27       	eor	r24, r25
 1ac:	8b b9       	out	0x0b, r24	; 11
			invert_tx();
			invert_status();
			break;
		}
	}
	switch(sending_status)
 1ae:	80 91 00 01 	lds	r24, 0x0100
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	19 f0       	breq	.+6      	; 0x1bc <__vector_13+0x34>
 1b6:	84 30       	cpi	r24, 0x04	; 4
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <__vector_13+0x4e>
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <__vector_13+0x40>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	98 e0       	ldi	r25, 0x08	; 8
 1c0:	89 27       	eor	r24, r25
 1c2:	8b b9       	out	0x0b, r24	; 11
	{
		case collision:
		{
			invert_status();
			sending_status=collision2;
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__vector_13+0x4a>
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	98 e0       	ldi	r25, 0x08	; 8
 1cc:	89 27       	eor	r24, r25
 1ce:	8b b9       	out	0x0b, r24	; 11
			break;
		}
		case collision2:
		{
			invert_status();
			sending_status=unknown;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 00 01 	sts	0x0100, r24
			break;
		}
	}
}
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_20>:
		send_update(stat);         //initiate sending machine
	}
}

ISR(USART_TX_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
	switch(sending_status)
 1f2:	80 91 00 01 	lds	r24, 0x0100
 1f6:	86 30       	cpi	r24, 0x06	; 6
 1f8:	19 f0       	breq	.+6      	; 0x200 <__vector_20+0x1c>
 1fa:	87 30       	cpi	r24, 0x07	; 7
 1fc:	b1 f4       	brne	.+44     	; 0x22a <__vector_20+0x46>
 1fe:	0c c0       	rjmp	.+24     	; 0x218 <__vector_20+0x34>
	{
		case first_portion_sent:
		{
			sending_status=second_portion_sent;
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	80 93 00 01 	sts	0x0100, r24
			UDR0=~(sending_buffer^dev_id);
 206:	90 91 0c 01 	lds	r25, 0x010C
 20a:	80 91 0e 01 	lds	r24, 0x010E
 20e:	89 27       	eor	r24, r25
 210:	80 95       	com	r24
 212:	80 93 c6 00 	sts	0x00C6, r24
 216:	09 c0       	rjmp	.+18     	; 0x22a <__vector_20+0x46>
			break;
		}
		case second_portion_sent:
		{
			sending_status=unknown;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 00 01 	sts	0x0100, r24
	PORTC &= ~(1 << PINC4);
}
//disable usart tx clock and interrupt on tx-end
inline void usart_disable_tx()
{
	UCSR0B&= ~((1<<TXCIE0) | (1 <<TXEN0));
 21e:	80 91 c1 00 	lds	r24, 0x00C1
 222:	87 7b       	andi	r24, 0xB7	; 183
 224:	80 93 c1 00 	sts	0x00C1, r24
{
	PORTC |= (1 << PINC4);
}
inline void max_out_off()
{
	PORTC &= ~(1 << PINC4);
 228:	44 98       	cbi	0x08, 4	; 8
			output_off();
			break;
		}

	}
}
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_18>:

ISR(USART_RX_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
	switch(sending_status)
 246:	80 91 00 01 	lds	r24, 0x0100
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f0       	breq	.+6      	; 0x254 <__vector_18+0x1c>
 24e:	85 30       	cpi	r24, 0x05	; 5
 250:	41 f5       	brne	.+80     	; 0x2a2 <__vector_18+0x6a>
 252:	0e c0       	rjmp	.+28     	; 0x270 <__vector_18+0x38>
	{
		case sending_dev_id_done:
		{
			if( ref == UDR0 )
 254:	90 91 0b 01 	lds	r25, 0x010B
 258:	80 91 c6 00 	lds	r24, 0x00C6
 25c:	98 17       	cp	r25, r24
 25e:	e1 f4       	brne	.+56     	; 0x298 <__vector_18+0x60>
	max_out_off();
}
//invert status led
inline void invert_status()
{
	PORTD ^= (1 << PIND3);
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	98 e0       	ldi	r25, 0x08	; 8
 264:	89 27       	eor	r24, r25
 266:	8b b9       	out	0x0b, r24	; 11
			{
				invert_status();	
				sending_status=receiveing_first_ok;
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	80 93 00 01 	sts	0x0100, r24
 26e:	19 c0       	rjmp	.+50     	; 0x2a2 <__vector_18+0x6a>
			}
			break;
		}
		case receiveing_first_ok:
		{
			if(ref == UDR0)
 270:	90 91 0b 01 	lds	r25, 0x010B
 274:	80 91 c6 00 	lds	r24, 0x00C6
 278:	98 17       	cp	r25, r24
 27a:	71 f4       	brne	.+28     	; 0x298 <__vector_18+0x60>
			{
				sending_status=first_portion_sent;
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	80 93 00 01 	sts	0x0100, r24
{
	UCSR0B&= ~((1<<TXCIE0) | (1 <<TXEN0));
}
inline void usart_enable_tx()
{
	UCSR0B|= (1<<TXCIE0) | (1 <<TXEN0);
 282:	80 91 c1 00 	lds	r24, 0x00C1
 286:	88 64       	ori	r24, 0x48	; 72
 288:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0B &= ~((1<<RXCIE0) | (1<<RXEN0));
	PORTC  |= (1 << PINC5);
}
inline void max_out_on()
{
	PORTC |= (1 << PINC4);
 28c:	44 9a       	sbi	0x08, 4	; 8
				output_on();
				UDR0=sending_buffer;
 28e:	80 91 0c 01 	lds	r24, 0x010C
 292:	80 93 c6 00 	sts	0x00C6, r24
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <__vector_18+0x6a>
			}
			else
			{
				sending_status=unknown;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	80 93 00 01 	sts	0x0100, r24
				old_pin_status=0;
 29e:	10 92 01 01 	sts	0x0101, r1
			}
			break;
		}

	}
}
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <init_io>:



void init_io()
{
	DDRB=0;
 2b0:	14 b8       	out	0x04, r1	; 4
	PORTB= (1<<PINB3) | (1<<PINB4) | (1<<PINB5);  //enable input pull-ups
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	85 b9       	out	0x05, r24	; 5

	DDRC = (1<<PINC4) | (1<< PINC5);              //enable max485 contol lines
 2b6:	90 e3       	ldi	r25, 0x30	; 48
 2b8:	97 b9       	out	0x07, r25	; 7
	PORTC= (1<<PINC0) | (1<<PINC1);               //enable input pull-ups
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	88 b9       	out	0x08, r24	; 8

	DDRD = (1 << PIND1) | (1 << PIND3);           //enabe status led control and tx line
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	8a b9       	out	0x0a, r24	; 10
	PORTD= (1 << PIND4) | (1 << PIND5);           //enable input pull-ups		
 2c2:	9b b9       	out	0x0b, r25	; 11
}
 2c4:	08 95       	ret

000002c6 <init_timer>:
void init_timer()
{
	//timer0 - about 244Hz  - read inputs
	TIMSK0=1<<TOIE0;		
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	90 93 6e 00 	sts	0x006E, r25
	TCCR0B= (1<<CS02) | (1<<CS00);		
 2cc:	85 e0       	ldi	r24, 0x05	; 5
 2ce:	85 bd       	out	0x25, r24	; 37
	//timer1 - about 0.95Hz - status led
	TCCR1B= 1<<CS12;
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1= 1<<TOIE1;	
 2d6:	90 93 6f 00 	sts	0x006F, r25
	//timer2 - USART bitbang 16e6/38400=8*52	
	TCCR2B= (1<<CS21);
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 b1 00 	sts	0x00B1, r24
	
}
 2e0:	08 95       	ret

000002e2 <init_usart>:
}

void init_usart()   //only enables USART, but rx and tx clock are stopped and MAX485 i/o disabled
{
//speed 38400
	UBRR0H=0;
 2e2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=25;
 2e6:	89 e1       	ldi	r24, 0x19	; 25
 2e8:	80 93 c4 00 	sts	0x00C4, r24
//8bit 1 stopbit no parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	80 93 c2 00 	sts	0x00C2, r24

}
 2f2:	08 95       	ret

000002f4 <current_status>:

uint8_t current_status()   //read all input pins. 7th bit is always 1
{
	const uint8_t pinsb=(PINB & ( (1<<PINB3) | (1<<PINB4) | (1<<PINB5) ) )<<1;
 2f4:	93 b1       	in	r25, 0x03	; 3
	const uint8_t pinsc= PINC & ( (1<<PINC0) | (1<<PINC1)                );
 2f6:	86 b1       	in	r24, 0x06	; 6
	const uint8_t pinsd=(PIND & ( (1<<PIND4) | (1<<PIND5)              ) )>>1;
 2f8:	29 b1       	in	r18, 0x09	; 9
 2fa:	83 70       	andi	r24, 0x03	; 3
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	98 73       	andi	r25, 0x38	; 56
 300:	99 0f       	add	r25, r25
 302:	89 2b       	or	r24, r25
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	20 73       	andi	r18, 0x30	; 48
 308:	30 70       	andi	r19, 0x00	; 0
 30a:	35 95       	asr	r19
 30c:	27 95       	ror	r18

	return pinsb | pinsc | pinsd | (1<<7);
}
 30e:	82 2b       	or	r24, r18
 310:	08 95       	ret

00000312 <send_update>:

void send_update(uint8_t stat)
{
 312:	98 2f       	mov	r25, r24
	if(sending_status!=unknown)
 314:	80 91 00 01 	lds	r24, 0x0100
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	09 f0       	breq	.+2      	; 0x31e <send_update+0xc>
 31c:	42 c0       	rjmp	.+132    	; 0x3a2 <send_update+0x90>
	{
		return;
	}
	sending_buffer=stat;
 31e:	90 93 0c 01 	sts	0x010C, r25
	PORTC &= ~(1 << PINC4);
}
//disable usart tx clock and interrupt on tx-end
inline void usart_disable_tx()
{
	UCSR0B&= ~((1<<TXCIE0) | (1 <<TXEN0));
 322:	80 91 c1 00 	lds	r24, 0x00C1
 326:	87 7b       	andi	r24, 0xB7	; 183
 328:	80 93 c1 00 	sts	0x00C1, r24
	PORTD |= (1 << PIND3);
}
//power off tx led
inline void tx_off()
{
	PORTD &= ~(1 << PIND1);
 32c:	59 98       	cbi	0x0b, 1	; 11
	
	usart_disable_tx();
	tx_off();
	const uint32_t tref=ref;
 32e:	20 91 0b 01 	lds	r18, 0x010B
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
	max_out_off();
}
//invert status led
inline void invert_status()
{
	PORTD ^= (1 << PIND3);
 338:	8b b1       	in	r24, 0x0b	; 11
 33a:	98 e0       	ldi	r25, 0x08	; 8
 33c:	89 27       	eor	r24, r25
 33e:	8b b9       	out	0x0b, r24	; 11
	invert_status();
	sendbuf=0b00000000000000000000010000000001 | (tref<<1) | (tref <<11);
 340:	da 01       	movw	r26, r20
 342:	c9 01       	movw	r24, r18
 344:	7b e0       	ldi	r23, 0x0B	; 11
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	aa 1f       	adc	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	7a 95       	dec	r23
 350:	d1 f7       	brne	.-12     	; 0x346 <send_update+0x34>
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	44 1f       	adc	r20, r20
 358:	55 1f       	adc	r21, r21
 35a:	82 2b       	or	r24, r18
 35c:	93 2b       	or	r25, r19
 35e:	a4 2b       	or	r26, r20
 360:	b5 2b       	or	r27, r21
 362:	81 60       	ori	r24, 0x01	; 1
 364:	94 60       	ori	r25, 0x04	; 4
 366:	80 93 07 01 	sts	0x0107, r24
 36a:	90 93 08 01 	sts	0x0108, r25
 36e:	a0 93 09 01 	sts	0x0109, r26
 372:	b0 93 0a 01 	sts	0x010A, r27
	sending_counter=0b00000000000010000000000000000000;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	a8 e0       	ldi	r26, 0x08	; 8
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	80 93 02 01 	sts	0x0102, r24
 382:	90 93 03 01 	sts	0x0103, r25
 386:	a0 93 04 01 	sts	0x0104, r26
 38a:	b0 93 05 01 	sts	0x0105, r27
	tx_off();
}

inline void reset_timer2()
{
	TCNT2=255-42;
 38e:	85 ed       	ldi	r24, 0xD5	; 213
 390:	80 93 b2 00 	sts	0x00B2, r24
	GTCCR |= 1<<PSRASY;	
 394:	83 b5       	in	r24, 0x23	; 35
 396:	82 60       	ori	r24, 0x02	; 2
 398:	83 bd       	out	0x23, r24	; 35
}

inline void start_timer2()
{
	reset_timer2();
	TIMSK2 = 1<< TOIE2;	
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 70 00 	sts	0x0070, r24
	TIFR2 |= 1<<TOV2;	
 3a0:	b8 9a       	sbi	0x17, 0	; 23
 3a2:	08 95       	ret

000003a4 <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	1f 93       	push	r17
 3b0:	2f 93       	push	r18
 3b2:	3f 93       	push	r19
 3b4:	4f 93       	push	r20
 3b6:	5f 93       	push	r21
 3b8:	6f 93       	push	r22
 3ba:	7f 93       	push	r23
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
	const uint8_t stat=current_status();
 3c8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <current_status>
 3cc:	18 2f       	mov	r17, r24
	if(stat!=old_pin_status)		   //if status changed since last check
 3ce:	80 91 01 01 	lds	r24, 0x0101
 3d2:	18 17       	cp	r17, r24
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <__vector_16+0x40>
	{
		old_pin_status=current_status();
 3d6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <current_status>
 3da:	80 93 01 01 	sts	0x0101, r24
		send_update(stat);         //initiate sending machine
 3de:	81 2f       	mov	r24, r17
 3e0:	0e 94 89 01 	call	0x312	; 0x312 <send_update>
	}
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	1f 91       	pop	r17
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <init_config>:
}

void init_config()
{
//read device id and it's crc
	dev_id=eeprom_read_byte(&mac);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 34 02 	call	0x468	; 0x468 <__eerd_byte_m168p>
 410:	80 93 0e 01 	sts	0x010E, r24
	const uint8_t cfgctrl=eeprom_read_byte(&mac_crc);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 34 02 	call	0x468	; 0x468 <__eerd_byte_m168p>
	PORTD ^= (1 << PIND1);
}
//power on status led
inline void status_on()
{
	PORTD |= (1 << PIND3);
 41c:	5b 9a       	sbi	0x0b, 3	; 11

    status_on();
//if id matches crc
	if(dev_id == (cfgctrl ^ 0b10101010))
 41e:	20 91 0e 01 	lds	r18, 0x010E
 422:	9a ea       	ldi	r25, 0xAA	; 170
 424:	98 27       	eor	r25, r24
 426:	29 17       	cp	r18, r25
 428:	a9 f4       	brne	.+42     	; 0x454 <init_config+0x4c>
	{
		
		ref=( ( (1<<(dev_id) ) <<1) -1 );
 42a:	80 91 0e 01 	lds	r24, 0x010E
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <init_config+0x30>
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <init_config+0x2c>
 43c:	22 0f       	add	r18, r18
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	20 93 0b 01 	sts	0x010B, r18
		dev_id_shift=dev_id<<5;
 444:	80 91 0e 01 	lds	r24, 0x010E
 448:	82 95       	swap	r24
 44a:	88 0f       	add	r24, r24
 44c:	80 7e       	andi	r24, 0xE0	; 224
 44e:	80 93 06 01 	sts	0x0106, r24
 452:	08 95       	ret
	PORTC &= ~(1 << PINC4);
}
//disable usart tx clock and interrupt on tx-end
inline void usart_disable_tx()
{
	UCSR0B&= ~((1<<TXCIE0) | (1 <<TXEN0));
 454:	80 91 c1 00 	lds	r24, 0x00C1
 458:	87 7b       	andi	r24, 0xB7	; 183
 45a:	80 93 c1 00 	sts	0x00C1, r24
{
	PORTC |= (1 << PINC4);
}
inline void max_out_off()
{
	PORTC &= ~(1 << PINC4);
 45e:	44 98       	cbi	0x08, 4	; 8
	PORTD |= (1 << PIND3);
}
//power off tx led
inline void tx_off()
{
	PORTD &= ~(1 << PIND1);
 460:	59 98       	cbi	0x0b, 1	; 11
	}
	else
	{	
		//blinking tx and status leds one-by-one
		tx_mode_regular();		     				
		status=garbaged_config;	
 462:	10 92 0d 01 	sts	0x010D, r1
 466:	08 95       	ret

00000468 <__eerd_byte_m168p>:
 468:	f9 99       	sbic	0x1f, 1	; 31
 46a:	fe cf       	rjmp	.-4      	; 0x468 <__eerd_byte_m168p>
 46c:	92 bd       	out	0x22, r25	; 34
 46e:	81 bd       	out	0x21, r24	; 33
 470:	f8 9a       	sbi	0x1f, 0	; 31
 472:	99 27       	eor	r25, r25
 474:	80 b5       	in	r24, 0x20	; 32
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
