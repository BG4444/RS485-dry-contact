
PinMon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000348  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  000003fe  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000040  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000161  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d4  00000000  00000000  000005a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001cd  00000000  00000000  00000a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f3  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000272  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000031  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "hal.h"


int main()
{
	init_io();
  a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_io>
	init_config();
  aa:	0e 94 77 01 	call	0x2ee	; 0x2ee <init_config>
	init_usart();	
  ae:	0e 94 14 01 	call	0x228	; 0x228 <init_usart>
#include <avr/interrupt.h>

//enable usart rx clock and max485 output
inline void input_on()
{
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0);
  b2:	80 91 c1 00 	lds	r24, 0x00C1
  b6:	80 69       	ori	r24, 0x90	; 144
  b8:	80 93 c1 00 	sts	0x00C1, r24
	PORTC &= ~(1 << PINC5);
  bc:	45 98       	cbi	0x08, 5	; 8
	input_on();
	init_timer();
  be:	0e 94 06 01 	call	0x20c	; 0x20c <init_timer>
	sei();
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x1e>

000000c6 <__vector_9>:
volatile uint8_t sending_counter=0;
volatile uint8_t dev_id_shift;


ISR(TIMER2_OVF_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	sending_counter-=32;
  d4:	80 91 02 01 	lds	r24, 0x0102
  d8:	80 52       	subi	r24, 0x20	; 32
  da:	80 93 02 01 	sts	0x0102, r24
	if(sending_counter)
  de:	80 91 02 01 	lds	r24, 0x0102
  e2:	88 23       	and	r24, r24
  e4:	91 f0       	breq	.+36     	; 0x10a <__vector_9+0x44>
	{
		if( (sending_counter) <= (dev_id_shift) )
  e6:	90 91 02 01 	lds	r25, 0x0102
  ea:	80 91 03 01 	lds	r24, 0x0103
  ee:	89 17       	cp	r24, r25
  f0:	10 f0       	brcs	.+4      	; 0xf6 <__vector_9+0x30>
{
	PORTC |= (1 << PINC4);
}
inline void max_out_off()
{
	PORTC &= ~(1 << PINC4);
  f2:	44 98       	cbi	0x08, 4	; 8
  f4:	03 c0       	rjmp	.+6      	; 0xfc <__vector_9+0x36>
		{
			max_out_off();
		}		
		else
		{
			__asm__ __volatile__("nop\nnop\nnop\n");
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	00 00       	nop
	tx_off();
}

inline void reset_timer2()
{
	TCNT2=255-52;
  fc:	8b ec       	ldi	r24, 0xCB	; 203
  fe:	80 93 b2 00 	sts	0x00B2, r24
	GTCCR |= 1<<PSRASY;	
 102:	83 b5       	in	r24, 0x23	; 35
 104:	82 60       	ori	r24, 0x02	; 2
 106:	83 bd       	out	0x23, r24	; 35
 108:	06 c0       	rjmp	.+12     	; 0x116 <__vector_9+0x50>
{
	PORTC |= (1 << PINC4);
}
inline void max_out_off()
{
	PORTC &= ~(1 << PINC4);
 10a:	44 98       	cbi	0x08, 4	; 8
		reset_timer2();
	}
	else
	{
		max_out_off();
		sending_status=sending_dev_id_done;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 00 01 	sts	0x0100, r24
	TIFR2 |= 1<<TOV2;	
}

inline void stop_timer2()
{
	TIMSK2 = 0;
 112:	10 92 70 00 	sts	0x0070, r1
		stop_timer2();
	}
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_13>:


ISR(TIMER1_OVF_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	switch(status)
 132:	80 91 05 01 	lds	r24, 0x0105
 136:	88 23       	and	r24, r24
 138:	41 f4       	brne	.+16     	; 0x14a <__vector_13+0x26>
	PORTD ^= (1 << PIND3);
}
//invert tx pin
inline void invert_tx()
{
	PORTD ^= (1 << PIND1);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	89 27       	eor	r24, r25
 140:	8b b9       	out	0x0b, r24	; 11
	max_out_off();
}
//invert status led
inline void invert_status()
{
	PORTD ^= (1 << PIND3);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	98 e0       	ldi	r25, 0x08	; 8
 146:	89 27       	eor	r24, r25
 148:	8b b9       	out	0x0b, r24	; 11
			invert_tx();
			invert_status();
			break;
		}
	}
	switch(sending_status)
 14a:	80 91 00 01 	lds	r24, 0x0100
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	19 f0       	breq	.+6      	; 0x158 <__vector_13+0x34>
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	71 f4       	brne	.+28     	; 0x172 <__vector_13+0x4e>
 156:	06 c0       	rjmp	.+12     	; 0x164 <__vector_13+0x40>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	98 e0       	ldi	r25, 0x08	; 8
 15c:	89 27       	eor	r24, r25
 15e:	8b b9       	out	0x0b, r24	; 11
	{
		case collision:
		{
			invert_status();
			sending_status=collision2;
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	05 c0       	rjmp	.+10     	; 0x16e <__vector_13+0x4a>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	98 e0       	ldi	r25, 0x08	; 8
 168:	89 27       	eor	r24, r25
 16a:	8b b9       	out	0x0b, r24	; 11
			break;
		}
		case collision2:
		{
			invert_status();
			sending_status=unknown;
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 00 01 	sts	0x0100, r24
			break;
		}
	}
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_20>:
		send_update(stat);         //initiate sending machine
	}
}

ISR(USART_TX_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
	
}
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_18>:

ISR(USART_RX_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
	switch(sending_status)
 1a8:	80 91 00 01 	lds	r24, 0x0100
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	c9 f4       	brne	.+50     	; 0x1e2 <__vector_18+0x4e>
	{
		case sending_dev_id_done:
		{
			if( (((1<<(dev_id))<<1)-1) == UDR0 )
 1b0:	40 91 06 01 	lds	r20, 0x0106
 1b4:	20 91 c6 00 	lds	r18, 0x00C6
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_18+0x2e>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <__vector_18+0x2a>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	82 17       	cp	r24, r18
 1cc:	93 07       	cpc	r25, r19
 1ce:	31 f4       	brne	.+12     	; 0x1dc <__vector_18+0x48>
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	89 27       	eor	r24, r25
 1d6:	8b b9       	out	0x0b, r24	; 11
			{
				invert_status();	
				sending_status=unknown;		
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	01 c0       	rjmp	.+2      	; 0x1de <__vector_18+0x4a>
			}
			else
			{
				sending_status=collision;
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}
}
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <init_io>:



void init_io()
{
	DDRB=0;
 1f6:	14 b8       	out	0x04, r1	; 4
	PORTB= (1<<PINB3) | (1<<PINB4) | (1<<PINB5);  //enable input pull-ups
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	85 b9       	out	0x05, r24	; 5

	DDRC = (1<<PINC4) | (1<< PINC5);              //enable max485 contol lines
 1fc:	90 e3       	ldi	r25, 0x30	; 48
 1fe:	97 b9       	out	0x07, r25	; 7
	PORTC= (1<<PINC0) | (1<<PINC1);               //enable input pull-ups
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	88 b9       	out	0x08, r24	; 8

	DDRD = (1 << PIND1) | (1 << PIND3);           //enabe status led control and tx line
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	8a b9       	out	0x0a, r24	; 10
	PORTD= (1 << PIND4) | (1 << PIND5);           //enable input pull-ups		
 208:	9b b9       	out	0x0b, r25	; 11
}
 20a:	08 95       	ret

0000020c <init_timer>:
void init_timer()
{
	//timer0 - about 244Hz  - read inputs
	TIMSK0=1<<TOIE0;		
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	90 93 6e 00 	sts	0x006E, r25
	TCCR0B= (1<<CS02) | (1<<CS00);		
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	85 bd       	out	0x25, r24	; 37
	//timer1 - about 0.95Hz - status led
	TCCR1B= 1<<CS12;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	80 93 81 00 	sts	0x0081, r24
	TIMSK1= 1<<TOIE1;	
 21c:	90 93 6f 00 	sts	0x006F, r25
	//timer2 - USART bitbang 16e6/38400=8*52	
	TCCR2B= (1<<CS21);
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 b1 00 	sts	0x00B1, r24
	
}
 226:	08 95       	ret

00000228 <init_usart>:
}

void init_usart()   //only enables USART, but rx and tx clock are stopped and MAX485 i/o disabled
{
//speed 38400
	UBRR0H=0;
 228:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=25;
 22c:	89 e1       	ldi	r24, 0x19	; 25
 22e:	80 93 c4 00 	sts	0x00C4, r24
//8bit 1 stopbit no parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 c2 00 	sts	0x00C2, r24

}
 238:	08 95       	ret

0000023a <current_status>:

uint8_t current_status()   //read all input pins. 7th bit is always 1
{
	const uint8_t pinsb=(PINB & ( (1<<PINB3) | (1<<PINB4) | (1<<PINB5) ) )<<1;
 23a:	93 b1       	in	r25, 0x03	; 3
	const uint8_t pinsc= PINC & ( (1<<PINC0) | (1<<PINC1)                );
 23c:	86 b1       	in	r24, 0x06	; 6
	const uint8_t pinsd=(PIND & ( (1<<PIND4) | (1<<PIND5)              ) )>>1;
 23e:	29 b1       	in	r18, 0x09	; 9
 240:	83 70       	andi	r24, 0x03	; 3
 242:	80 68       	ori	r24, 0x80	; 128
 244:	98 73       	andi	r25, 0x38	; 56
 246:	99 0f       	add	r25, r25
 248:	89 2b       	or	r24, r25
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	20 73       	andi	r18, 0x30	; 48
 24e:	30 70       	andi	r19, 0x00	; 0
 250:	35 95       	asr	r19
 252:	27 95       	ror	r18

	return pinsb | pinsc | pinsd | (1<<7);
}
 254:	82 2b       	or	r24, r18
 256:	08 95       	ret

00000258 <send_update>:

void send_update(uint8_t stat)
{
 258:	98 2f       	mov	r25, r24
	if(sending_status!=unknown)
 25a:	80 91 00 01 	lds	r24, 0x0100
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	99 f4       	brne	.+38     	; 0x288 <send_update+0x30>
	{
		return;
	}
	sending_buffer=stat;
 262:	90 93 04 01 	sts	0x0104, r25
	PORTC &= ~(1 << PINC4);
}
//disable usart tx clock and interrupt on tx-end
inline void usart_disable_tx()
{
	UCSR0B&= ~((1<<TXCIE0) | (1 <<TXEN0));
 266:	80 91 c1 00 	lds	r24, 0x00C1
 26a:	87 7b       	andi	r24, 0xB7	; 183
 26c:	80 93 c1 00 	sts	0x00C1, r24
	PORTD |= (1 << PIND3);
}
//power off tx led
inline void tx_off()
{
	PORTD &= ~(1 << PIND1);
 270:	59 98       	cbi	0x0b, 1	; 11
	tx_off();
}

inline void reset_timer2()
{
	TCNT2=255-52;
 272:	8b ec       	ldi	r24, 0xCB	; 203
 274:	80 93 b2 00 	sts	0x00B2, r24
	GTCCR |= 1<<PSRASY;	
 278:	83 b5       	in	r24, 0x23	; 35
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	83 bd       	out	0x23, r24	; 35
}

inline void start_timer2()
{
	reset_timer2();
	TIMSK2 = 1<< TOIE2;	
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 70 00 	sts	0x0070, r24
	TIFR2 |= 1<<TOV2;	
 284:	b8 9a       	sbi	0x17, 0	; 23
	UCSR0B &= ~((1<<RXCIE0) | (1<<RXEN0));
	PORTC  |= (1 << PINC5);
}
inline void max_out_on()
{
	PORTC |= (1 << PINC4);
 286:	44 9a       	sbi	0x08, 4	; 8
 288:	08 95       	ret

0000028a <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	1f 93       	push	r17
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	const uint8_t stat=current_status();
 2ae:	0e 94 1d 01 	call	0x23a	; 0x23a <current_status>
 2b2:	18 2f       	mov	r17, r24
	if(stat!=old_pin_status)		   //if status changed since last check
 2b4:	80 91 01 01 	lds	r24, 0x0101
 2b8:	18 17       	cp	r17, r24
 2ba:	39 f0       	breq	.+14     	; 0x2ca <__vector_16+0x40>
	{
		old_pin_status=current_status();
 2bc:	0e 94 1d 01 	call	0x23a	; 0x23a <current_status>
 2c0:	80 93 01 01 	sts	0x0101, r24
		send_update(stat);         //initiate sending machine
 2c4:	81 2f       	mov	r24, r17
 2c6:	0e 94 2c 01 	call	0x258	; 0x258 <send_update>
	}
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	1f 91       	pop	r17
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <init_config>:
}

void init_config()
{
//read device id and it's crc
	dev_id=eeprom_read_byte(&mac);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 9a 01 	call	0x334	; 0x334 <__eerd_byte_m168p>
 2f6:	80 93 06 01 	sts	0x0106, r24
	const uint8_t cfgctrl=eeprom_read_byte(&mac_crc);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 9a 01 	call	0x334	; 0x334 <__eerd_byte_m168p>
	PORTD ^= (1 << PIND1);
}
//power on status led
inline void status_on()
{
	PORTD |= (1 << PIND3);
 302:	5b 9a       	sbi	0x0b, 3	; 11

    status_on();
//if id matches crc
	if(dev_id == (cfgctrl ^ 0b10101010))
 304:	20 91 06 01 	lds	r18, 0x0106
 308:	9a ea       	ldi	r25, 0xAA	; 170
 30a:	98 27       	eor	r25, r24
 30c:	29 17       	cp	r18, r25
 30e:	41 f4       	brne	.+16     	; 0x320 <init_config+0x32>
	{
		dev_id_shift=dev_id<<5;
 310:	80 91 06 01 	lds	r24, 0x0106
 314:	82 95       	swap	r24
 316:	88 0f       	add	r24, r24
 318:	80 7e       	andi	r24, 0xE0	; 224
 31a:	80 93 03 01 	sts	0x0103, r24
 31e:	08 95       	ret
	PORTC &= ~(1 << PINC4);
}
//disable usart tx clock and interrupt on tx-end
inline void usart_disable_tx()
{
	UCSR0B&= ~((1<<TXCIE0) | (1 <<TXEN0));
 320:	80 91 c1 00 	lds	r24, 0x00C1
 324:	87 7b       	andi	r24, 0xB7	; 183
 326:	80 93 c1 00 	sts	0x00C1, r24
{
	PORTC |= (1 << PINC4);
}
inline void max_out_off()
{
	PORTC &= ~(1 << PINC4);
 32a:	44 98       	cbi	0x08, 4	; 8
	PORTD |= (1 << PIND3);
}
//power off tx led
inline void tx_off()
{
	PORTD &= ~(1 << PIND1);
 32c:	59 98       	cbi	0x0b, 1	; 11
	}
	else
	{	
		//blinking tx and status leds one-by-one
		tx_mode_regular();		     				
		status=garbaged_config;	
 32e:	10 92 05 01 	sts	0x0105, r1
 332:	08 95       	ret

00000334 <__eerd_byte_m168p>:
 334:	f9 99       	sbic	0x1f, 1	; 31
 336:	fe cf       	rjmp	.-4      	; 0x334 <__eerd_byte_m168p>
 338:	92 bd       	out	0x22, r25	; 34
 33a:	81 bd       	out	0x21, r24	; 33
 33c:	f8 9a       	sbi	0x1f, 0	; 31
 33e:	99 27       	eor	r25, r25
 340:	80 b5       	in	r24, 0x20	; 32
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
