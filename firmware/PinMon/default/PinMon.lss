
PinMon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000058  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012a  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b1  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012c  00000000  00000000  00000359  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bc  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__vector_13>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	25 c0       	rjmp	.+74     	; 0x8e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include "hal.h"


int main()
{
	init_io();
  46:	14 d0       	rcall	.+40     	; 0x70 <init_io>
	init_timer();
  48:	1a d0       	rcall	.+52     	; 0x7e <init_timer>
  4a:	ff cf       	rjmp	.-2      	; 0x4a <main+0x4>

0000004c <__vector_13>:
#include "hal.h"
#include <avr/interrupt.h>
#include <inttypes.h>

ISR(TIMER1_OVF_vect)
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
	PORTC ^= (1 << PINC4);
}

inline void invert_status()
{
	PORTD ^= (1 << PIND3);
  5a:	8b b1       	in	r24, 0x0b	; 11
  5c:	98 e0       	ldi	r25, 0x08	; 8
  5e:	89 27       	eor	r24, r25
  60:	8b b9       	out	0x0b, r24	; 11
	invert_status();
}
  62:	9f 91       	pop	r25
  64:	8f 91       	pop	r24
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

00000070 <init_io>:


void init_io()
{
	DDRC = (1<<PINC4) | (1<< PINC5);
  70:	80 e3       	ldi	r24, 0x30	; 48
  72:	87 b9       	out	0x07, r24	; 7
	PORTC= 0;
  74:	18 b8       	out	0x08, r1	; 8

	DDRD = (1 << PIND3);
  76:	88 e0       	ldi	r24, 0x08	; 8
  78:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0;
  7a:	1b b8       	out	0x0b, r1	; 11
}
  7c:	08 95       	ret

0000007e <init_timer>:

void init_timer()
{
	TCCR1B= 1<<CS12;
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	80 93 81 00 	sts	0x0081, r24
	TIMSK1= 1<<TOIE1;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 93 6f 00 	sts	0x006F, r24
	sei();
  8a:	78 94       	sei
}
  8c:	08 95       	ret

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
