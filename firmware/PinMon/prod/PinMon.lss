
PinMon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000058  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012a  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b1  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012c  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b9  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 1a 00 	jmp	0x34	; 0x34 <__ctors_end>
   4:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
   8:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
   c:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  10:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  14:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  18:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  1c:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  20:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  24:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  28:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  2c:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>
  30:	0c 94 24 00 	jmp	0x48	; 0x48 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	0e 94 26 00 	call	0x4c	; 0x4c <main>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000048 <__bad_interrupt>:
  48:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000004c <main>:
#include "hal.h"


int main()
{
	init_io();
  4c:	0e 94 3d 00 	call	0x7a	; 0x7a <init_io>
	init_timer();
  50:	0e 94 44 00 	call	0x88	; 0x88 <init_timer>
  54:	ff cf       	rjmp	.-2      	; 0x54 <main+0x8>

00000056 <__vector_13>:
#include "hal.h"
#include <avr/interrupt.h>
#include <inttypes.h>

ISR(TIMER1_OVF_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
	PORTC ^= (1 << PINC4);
}

inline void invert_status()
{
	PORTD ^= (1 << PIND3);
  64:	8b b1       	in	r24, 0x0b	; 11
  66:	98 e0       	ldi	r25, 0x08	; 8
  68:	89 27       	eor	r24, r25
  6a:	8b b9       	out	0x0b, r24	; 11
	invert_status();
}
  6c:	9f 91       	pop	r25
  6e:	8f 91       	pop	r24
  70:	0f 90       	pop	r0
  72:	0f be       	out	0x3f, r0	; 63
  74:	0f 90       	pop	r0
  76:	1f 90       	pop	r1
  78:	18 95       	reti

0000007a <init_io>:


void init_io()
{
	DDRC = (1<<PINC4) | (1<< PINC5);
  7a:	80 e3       	ldi	r24, 0x30	; 48
  7c:	87 b9       	out	0x07, r24	; 7
	PORTC= 0;
  7e:	18 b8       	out	0x08, r1	; 8

	DDRD = (1 << PIND3);
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0;
  84:	1b b8       	out	0x0b, r1	; 11
}
  86:	08 95       	ret

00000088 <init_timer>:

void init_timer()
{
	TCCR1B= 1<<CS12;
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	80 93 81 00 	sts	0x0081, r24
	TIMSK1= 1<<TOIE1;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 93 6f 00 	sts	0x006F, r24
	sei();
  94:	78 94       	sei
}
  96:	08 95       	ret

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
