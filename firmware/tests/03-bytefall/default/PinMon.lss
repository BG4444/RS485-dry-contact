
PinMon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000200  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d5  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000021c  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000134  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000266  00000000  00000000  00000665  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000146  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
#include <inttypes.h>

volatile uint8_t cnt=0;

ISR(TIMER1_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25



inline void invert_status()
{
	PORTD ^= (1 << PIND3);
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	98 e0       	ldi	r25, 0x08	; 8
  a2:	89 27       	eor	r24, r25
  a4:	8b b9       	out	0x0b, r24	; 11
	invert_status();
}
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
	
}
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_20>:

ISR(USART_TX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	UDR0=cnt;
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	80 93 c6 00 	sts	0x00C6, r24
	cnt++;			
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 00 01 	sts	0x0100, r24
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_18>:

ISR(USART_RX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
	
}
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <init_io>:



void init_io()
{
	DDRB=0;
 106:	14 b8       	out	0x04, r1	; 4
	PORTB= (1<<PINB3) | (1<<PINB4) | (1<<PINB5);
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	85 b9       	out	0x05, r24	; 5

	DDRC = (1<<PINC4) | (1<< PINC5);
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	97 b9       	out	0x07, r25	; 7
	PORTC= (1<<PINC0) | (1<<PINC1);
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	88 b9       	out	0x08, r24	; 8

	DDRD = (1 << PIND3);
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	8a b9       	out	0x0a, r24	; 10
	PORTD= (1 << PIND4) | (1<<PIND5);
 118:	9b b9       	out	0x0b, r25	; 11
}
 11a:	08 95       	ret

0000011c <init_timer>:

void init_timer()
{
	TCCR1B= 1<<CS12;
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	80 93 81 00 	sts	0x0081, r24
	TIMSK1= 1<<TOIE1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 6f 00 	sts	0x006F, r24
	
	TCCR0B= (1<<CS02) | (1<<CS00);		
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	85 bd       	out	0x25, r24	; 37
}
 12c:	08 95       	ret

0000012e <init_config>:

void init_config()
{
	
}
 12e:	08 95       	ret

00000130 <init_usart>:

void init_usart()
{
//speed 38400
	UBRR0H=0;
 130:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=25;
 134:	89 e1       	ldi	r24, 0x19	; 25
 136:	80 93 c4 00 	sts	0x00C4, r24
//8bit 1 stopbit no parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00);
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	80 93 c2 00 	sts	0x00C2, r24

}
 140:	08 95       	ret

00000142 <start_tx_timer>:

void start_tx_timer()
{
	
}
 142:	08 95       	ret

00000144 <current_status>:

uint8_t current_status()
{
	const uint8_t pinsb=(PINB & ( (1<<PINB3) | (1<<PINB4) | (1<<PINB5) ) )<<1;
 144:	93 b1       	in	r25, 0x03	; 3
	const uint8_t pinsc= PINC & ( (1<<PINC0) | (1<<PINC1)                );
 146:	86 b1       	in	r24, 0x06	; 6
	const uint8_t pinsd=(PIND & ( (1<<PIND4) | (1<<PIND5)              ) )>>1;
 148:	29 b1       	in	r18, 0x09	; 9
 14a:	83 70       	andi	r24, 0x03	; 3
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	98 73       	andi	r25, 0x38	; 56
 150:	99 0f       	add	r25, r25
 152:	89 2b       	or	r24, r25
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	20 73       	andi	r18, 0x30	; 48
 158:	30 70       	andi	r19, 0x00	; 0
 15a:	35 95       	asr	r19
 15c:	27 95       	ror	r18

	return pinsb | pinsc | pinsd | (1<<7);
}
 15e:	82 2b       	or	r24, r18
 160:	08 95       	ret

00000162 <main>:
#include "hal.h"


int main()
{
	init_io();
 162:	0e 94 83 00 	call	0x106	; 0x106 <init_io>
	init_config();
 166:	0e 94 97 00 	call	0x12e	; 0x12e <init_config>
	init_usart();	
 16a:	0e 94 98 00 	call	0x130	; 0x130 <init_usart>
	init_timer();
 16e:	0e 94 8e 00 	call	0x11c	; 0x11c <init_timer>
	sei();
 172:	78 94       	sei
}


inline void output_on()
{
	UCSR0B|= (1<<TXCIE0) | (1 <<TXEN0);
 174:	80 91 c1 00 	lds	r24, 0x00C1
 178:	88 64       	ori	r24, 0x48	; 72
 17a:	80 93 c1 00 	sts	0x00C1, r24
	PORTC |= (1 << PINC4);
 17e:	44 9a       	sbi	0x08, 4	; 8
	output_on();
	UDR0=0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	80 93 c6 00 	sts	0x00C6, r24
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x24>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
